.PHONY: help check
.DEFAULT_GOAL := help

SUBPKGS=cpu disk docker host internal load mem net process

help:  ## show help
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

check:  ## errcheck and golint checks
	errcheck -ignore="Close|Run|Write" ./...
	golint ./... | egrep -v 'underscores|HttpOnly|should have comment|comment on exported|CamelCase|VM|UID' && exit 1 || exit 0

BUILD_FAIL_PATTERN=grep -v "exec format error" | grep "build failed" && exit 1 || exit 0
test_all:  ## run gopsutil tests on all supported platforms
	# Supported operating systems
	GOOS=linux GOARCH=amd64 go get -t ./...
	GOOS=linux GOARCH=amd64 go test ./... | $(BUILD_FAIL_PATTERN)
	GOOS=linux GOARCH=386 go get -t -v ./...
	GOOS=linux GOARCH=386 go test ./... | $(BUILD_FAIL_PATTERN)
	GOOS=linux GOARCH=arm go get -t ./...
	GOOS=linux GOARCH=arm go test ./... | $(BUILD_FAIL_PATTERN)
	GOOS=linux GOARCH=arm64 go get -t ./...
	GOOS=linux GOARCH=arm64 go test ./... | $(BUILD_FAIL_PATTERN)
	GOOS=freebsd go get -t ./...
	GOOS=freebsd go test ./... | $(BUILD_FAIL_PATTERN)
	GOOS=freebsd GOARCH=arm go get -t ./...
	GOOS=freebsd GOARCH=arm go test ./... | $(BUILD_FAIL_PATTERN)
	CGO_ENABLED=0 GOOS=darwin go get -t ./...
	CGO_ENABLED=0 GOOS=darwin go test ./... | $(BUILD_FAIL_PATTERN)
	GOOS=windows go get -t ./...
	GOOS=windows go test ./... | $(BUILD_FAIL_PATTERN)
	# Operating systems supported for building only (not implemented error if used)
	GOOS=solaris go get -t ./...
	GOOS=solaris go test ./... | $(BUILD_FAIL_PATTERN)
	GOOS=dragonfly go get -t ./...
	GOOS=dragonfly go test ./... | $(BUILD_FAIL_PATTERN)
	GOOS=netbsd go get -t ./...
	GOOS=netbsd go test ./... | $(BUILD_FAIL_PATTERN)
	# cross build to OpenBSD does not work since process uses "C" cgo
#	GOOS=openbsd go get -t ./...
#	GOOS=openbsd go test ./... | $(BUILD_FAIL_PATTERN)

ifeq ($(shell uname -s), Darwin)
	CGO_ENABLED=1 GOOS=darwin go get -t ./...
	CGO_ENABLED=1 GOOS=darwin go test ./... | $(BUILD_FAIL_PATTERN)
endif
	@echo 'Successfully tested on all known operating systems'

build_all:  ## test gopsutil is buildable on all platforms
	# Supported operating systems
	GOOS=linux GOARCH=amd64 go get ./...
	GOOS=linux GOARCH=amd64 go build ./...
	GOOS=linux GOARCH=386 go get ./...
	GOOS=linux GOARCH=386 go build ./...
	GOOS=linux GOARCH=arm go get ./...
	GOOS=linux GOARCH=arm go build ./...
	GOOS=linux GOARCH=arm64 go get ./...
	GOOS=linux GOARCH=arm64 go build ./...
	GOOS=freebsd go get ./...
	GOOS=freebsd go build ./...
	GOOS=freebsd GOARCH=arm go get ./...
	GOOS=freebsd GOARCH=arm go build ./...
	CGO_ENABLED=0 GOOS=darwin go get ./...
	CGO_ENABLED=0 GOOS=darwin go build ./...
	GOOS=windows go get ./...
	GOOS=windows go build ./...
	# Operating systems supported for building only (not implemented error if used)
	GOOS=solaris go get ./...
	GOOS=solaris go build ./...
	GOOS=dragonfly go get ./...
	GOOS=dragonfly go build ./...
	GOOS=netbsd go get ./...
	GOOS=netbsd go build ./...
	# cross build to OpenBSD does not work since process uses "C" cgo
#	GOOS=openbsd go get ./...
#	GOOS=openbsd go build ./...
	# test fallbacks
	GOOS=nacl GOARCH=amd64p32 go get ./...
	GOOS=nacl GOARCH=amd64p32 go build ./...

ifeq ($(shell uname -s), Darwin)
	CGO_ENABLED=1 GOOS=darwin go get ./...
	CGO_ENABLED=1 GOOS=darwin go build ./...
endif
	@echo 'Successfully built on all known operating systems'

init_tools:
	go get github.com/golang/dep/cmd/dep
